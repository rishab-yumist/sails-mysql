{
  "name": "mysql-live-select",
  "version": "1.0.3",
  "description": "Live updating MySQL SELECT statements",
  "main": "lib/LiveMysql.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/numtel/mysql-live-select.git"
  },
  "scripts": {
    "test": "nodeunit --reporter=minimal test"
  },
  "keywords": [
    "mysql",
    "binlog",
    "select",
    "live",
    "update"
  ],
  "author": {
    "name": "Ben Green",
    "email": "ben@latenightsketches.com",
    "url": "http://github.com/numtel"
  },
  "license": "MIT",
  "dependencies": {
    "lodash": "^3.10.1",
    "md5": "^2.0.0",
    "mysql": "^2.8.0",
    "zongji": "^0.3.2"
  },
  "devDependencies": {
    "nodeunit": "^0.9.0"
  },
  "gitHead": "b2675a4355a47a876e8e31a0972af76233afd1d7",
  "readme": "# mysql-live-select [![Build Status](https://travis-ci.org/numtel/mysql-live-select.svg?branch=master)](https://travis-ci.org/numtel/mysql-live-select)\n\nNPM Package to provide events when a MySQL select statement result set changes.\n\nBuilt using the [`zongji` Binlog Tailer](https://github.com/nevill/zongji) and [`node-mysql`](https://github.com/felixge/node-mysql) projects.\n\n* [Example Application using Express, SockJS and React](https://github.com/numtel/reactive-mysql-example)\n* [Meteor package for reactive MySQL](https://github.com/numtel/meteor-mysql)\n* [NPM Package for Sails.js connection adapter integration](https://github.com/numtel/sails-mysql-live-select)\n* [Analogous package for PostgreSQL, `pg-live-select`](https://github.com/numtel/pg-live-select)\n\nThis package has been tested to work in MySQL 5.5.40 and 5.6.19. Expected support is all MySQL server version >= 5.1.15.\n\n## Installation\n\n* Add the package to your project:\n  ```bash\n  $ npm install mysql-live-select\n  ```\n\n* Enable MySQL binlog in `my.cnf`, restart MySQL server after making the changes.\n\n  ```\n  # binlog config\n  server-id        = 1\n  binlog_format    = row\n  log_bin          = /var/log/mysql/mysql-bin.log\n  binlog_do_db     = employees   # optional\n  expire_logs_days = 10          # optional\n  max_binlog_size  = 100M        # optional\n  ```\n* Create an account with replication privileges:\n\n  ```sql\n  GRANT REPLICATION SLAVE, REPLICATION CLIENT, SELECT ON *.* TO 'user'@'localhost'\n  ```\n\n## LiveMysql Constructor\n\nThe `LiveMysql` constructor makes 3 connections to your MySQL database:\n\n* Connection for executing `SELECT` queries (exposed `node-mysql` instance as `db` property)\n* Replication slave connection\n* `information_schema` connection for column information\n\n\nArgument | Type | Description\n---------|------|---------------------------\n`settings` | `object` | An object defining the settings. In addition to the [`node-mysql` connection settings](https://github.com/felixge/node-mysql#connection-options), the additional settings below are available.\n`callback` | `function` | Optional callback on connection success/failure. Accepts one argument, `error`.\n\nSetting | Type | Description\n--------|------|------------------------------\n`serverId`  | `integer` | [Unique number (1 - 2<sup>32</sup>)](http://dev.mysql.com/doc/refman/5.0/en/replication-options.html#option_mysqld_server-id) to identify this replication slave instance. Must be specified if running more than one instance.<br>**Default:** `1`\n`minInterval` | `integer` | Pass a number of milliseconds to use as the minimum between result set updates. Omit to refresh results on every update. May be changed at runtime.\n`checkConditionWhenQueued` | `boolean` | Set to `true` to call the condition function of a query on every binlog row change event. By default (when undefined or `false`), the condition function will not be called again when a query is already queued to be refreshed. Enabling this can be useful if external caching of row changes.\n\n```javascript\n// Example:\nvar liveConnection = new LiveMysql(settings);\nvar table = 'players';\nvar id = 11;\n\nliveConnection.select(function(esc, escId){\n  return (\n    'select * from ' + escId(table) +\n    'where `id`=' + esc(id)\n  );\n}, [ {\n  table: table,\n  condition: function(row, newRow){\n    // Only refresh the results when the row matching the specified id is\n    // changed.\n    return row.id === id\n      // On UPDATE queries, newRow must be checked as well\n      || (newRow && newRow.id === id);\n  }\n} ]).on('update', function(diff, data){\n  // diff contains an object describing the difference since the previous update\n  // data contains an array of rows of the new result set\n  console.log(data);\n});\n```\nSee [`example.js`](example.js) for full source...\n\n\n### LiveMysql.prototype.select(query, triggers)\n\nArgument | Type | Description\n---------|------|----------------------------------\n`query`  | `string` or `function` | `SELECT` SQL statement. See note below about passing function.\n`triggers` | `[object]` | Array of objects defining which row changes to update result set\n\nReturns `LiveMysqlSelect` object\n\n#### Function as `query`\n\nA function may be passed as the `query` argument that accepts two arguments.\n\n* The first argument, `esc` is a function that escapes values in the query.\n* The second argument, `escId` is a function that escapes identifiers in the query.\n\n#### Trigger options\n\nName | Type | Description\n-----|------|------------------------------\n`table` | `string` | Name of table (required)\n`database` | `string` | Name of database (optional)<br>**Default:** `database` setting specified on connection\n`condition` | `function` | Evaluate row values (optional)\n\n#### Condition Function\n\nA condition function accepts up to three arguments:\n\nArgument Name | Description\n--------------|-----------------------------\n`row`         | Table row data\n`newRow`      | New row data (only available on `UPDATE` queries, `null` for others)\n`rowDeleted`  | Extra argument for aid in external caching: `true` on `DELETE`  queries, `false` on `INSERT`  queries, `null` on `UPDATE`  queries.\n\nReturn `true` when the row data meets the condition to update the result set.\n\n### LiveMysql.prototype.pause()\n\nTemporarily skip processing of updates from the binary log.\n\n### LiveMysql.prototype.resume()\n\nBegin processing updates after `pause()`. All active live select instances will be refreshed upon resume.\n\n### LiveMysql.prototype.end()\n\nClose connections and stop checking for updates.\n\n### LiveMysql.applyDiff(data, diff)\n\nExposed statically on the LiveMysql object is a function for applying a `diff` given in an `update` event to an array of rows given in the `data` argument.\n\n## LiveMysqlSelect object\n\nEach call to the `select()` method on a LiveMysql object, returns a `LiveMysqlSelect` object with the following methods:\n\nMethod Name | Arguments | Description\n------------|-----------|-----------------------\n`on`, `addListener` | `event`, `handler` | Add an event handler to the result set. See the following section for a list of the available event names.\n`update`    | `callback` | Update the result set. Callback function accepts `error, rows` arguments. Events will be emitted.\n`stop`      | *None* | Stop receiving updates\n`active`    | *None* | Return `true` if ready to recieve updates, `false` if `stop()` method has been called.\n\nAs well as all of the other methods available on [`EventEmitter`](http://nodejs.org/api/events.html)...\n\n### Available Events\n\nEvent Name | Arguments | Description\n-----------|-----------|---------------------------\n`update` | `diff`, `data` | First argument contains an object describing the difference since the previous `update` event with `added`, `removed`, `moved`, and `copied` rows. Second argument contains complete result set array.\n`error` | `error` | Unhandled errors will be thrown\n\n## Running Tests\n\nTests must be run with a properly configured MySQL server. Configure test settings in `test/settings/mysql.js`.\n\nExecute [Nodeunit](https://github.com/caolan/nodeunit) using the `npm test` command.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/numtel/mysql-live-select/issues"
  },
  "homepage": "https://github.com/numtel/mysql-live-select#readme",
  "_id": "mysql-live-select@1.0.3",
  "_shasum": "40ff4d30eeae0ec74df3762ad2b7b2208e42b975",
  "_from": "git+https://git@github.com/rishab-yumist/mysql-live-select.git",
  "_resolved": "git+https://git@github.com/rishab-yumist/mysql-live-select.git#b2675a4355a47a876e8e31a0972af76233afd1d7"
}
